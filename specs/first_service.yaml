openapi: 3.0.0
info:
  title: "API documentation: FirstService"
  description: >
    Documentation of services API: FirstService
  version: 1.0.0
tags:
  - name: user
    description: Operations with user
x-tagGroups:
  - name: External
    tags:
      - users
paths:
  /api/v1/users:
    post:
      tags:
        - users
      summary: User creation
      description: More details about user creation
      operationId: userCreation
      requestBody:
        requestBody:
        $ref: "#/components/requestBodies/userCreationBody"
      responses:
        "200":
          description: user creation successful
          content:
            application/json:
              example:
                token: fEt4IouUyRrqlx80treEWwq8
        "422":
          description: user creation failed
          content:
            application/json:
              schema:
                properties:
                  response:
                    $ref: "#/components/schemas/ErrorResponse"
              examples:
                "Missing parameters":
                  value:
                    error: 'error-1'
                    message: 'error-message-1'
                "Validation failed":
                  value:
                    error: 'error-2'
                    message: 'error-message-2'
    get:
      tags:
        - users
      security:
        - AuthToken: []
      summary: Returns user info by email
      description: Returns user info if user is exists. User search is carried out by email
      operationId: userInfo
      parameters:
        - in: query
          name: email
          description: User email
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: authentication error
          content:
            text/plain:
              example: "HTTP Token: Access denied."
        "422":
          description: missing parameters or wrong email
          content:
            application/json:
              schema:
                properties:
                  response:
                    $ref: "#/components/schemas/ErrorResponse"

servers:
  - url: https://localhost.staging
    description: Staging server
  - url: https://localhost.production
    description: Production server

components:
  requestBodies:
    userCreationBody:
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                example: martin@local
              password:
                type: string
              first_name:
                type: string
                example: Martin
              last_name:
                type: string
                example: Fowler
              gender:
                type: string
                enum:
                  - m
                  - f
              born_on:
                type: string
                example: '1963-12-18'
            required:
              - email
              - password
              - first_name
              - gender
              - born_on
      description: User creation credentials
      required: true
  securitySchemes:
    AuthToken:
      description: >
        For accessing the API a valid auth token must be passed in all the
        queries in the 'Authorization' header.

        A valid auth token is generated by the API and returned as answer of a call
        to the login and registration endpoints.

        The following syntax must be used in the 'Authorization' header:

            Token token="aQNeG5FtdrgU49eC42mShNjX"
      type: apiKey
      name: Authorization
      in: header
  schemas:
    ErrorResponse:
      properties:
        error:
          type: string
        message:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          example: martin@local
        first_name:
          type: string
          example: Martin
        last_name:
          type: string
          example: Fowler
        gender:
          type: string
          enum:
            - m
            - f
        born_on:
          type: string
          example: '1963-12-18'